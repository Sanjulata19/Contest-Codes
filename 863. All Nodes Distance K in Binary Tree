//https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    map<TreeNode*, int> m;
    
    int dfs(TreeNode* root, TreeNode* target)
    {
        if(!root) return 0;
        
        int left, right;
        left = dfs(root -> left, target);
        right = dfs(root -> right, target);
        
        if(root-> val == target-> val)
        {
            m[root] = 0;
            return 1;
        }
        
        if(left > 0) 
        {
            m[root] = left;
            return left + 1;
        }
        if(right > 0)
        {
            m[root] = right;
            return right + 1;
        }
        return 0;
    }
    
    void dfs1(TreeNode* root, TreeNode* target, int K, int level, vector<int> & ans)
    {
        if(!root) return;
        
        if(m.find(root) != m.end()) level = m[root];
        if(level == K) ans.push_back(root -> val);
        dfs1(root->left, target, K, level + 1, ans);
        dfs1(root->right, target, K, level + 1, ans);
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int K) {
        vector<int> ans;
        dfs(root, target);
        dfs1(root, target, K, 0, ans);
        return ans;
    }
};
